// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class ExonymWalletLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ExonymWalletLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ExonymWalletLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int graal_create_isolate(
    ffi.Pointer<graal_create_isolate_params_t> params,
    ffi.Pointer<ffi.Pointer<graal_isolate_t>> isolate,
    ffi.Pointer<ffi.Pointer<graal_isolatethread_t>> thread,
  ) {
    return _graal_create_isolate(
      params,
      isolate,
      thread,
    );
  }

  late final _graal_create_isolatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<graal_create_isolate_params_t>,
                  ffi.Pointer<ffi.Pointer<graal_isolate_t>>,
                  ffi.Pointer<ffi.Pointer<graal_isolatethread_t>>)>>(
      'graal_create_isolate');
  late final _graal_create_isolate = _graal_create_isolatePtr.asFunction<
      int Function(
          ffi.Pointer<graal_create_isolate_params_t>,
          ffi.Pointer<ffi.Pointer<graal_isolate_t>>,
          ffi.Pointer<ffi.Pointer<graal_isolatethread_t>>)>();

  int graal_attach_thread(
    ffi.Pointer<graal_isolate_t> isolate,
    ffi.Pointer<ffi.Pointer<graal_isolatethread_t>> thread,
  ) {
    return _graal_attach_thread(
      isolate,
      thread,
    );
  }

  late final _graal_attach_threadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<graal_isolate_t>,
                  ffi.Pointer<ffi.Pointer<graal_isolatethread_t>>)>>(
      'graal_attach_thread');
  late final _graal_attach_thread = _graal_attach_threadPtr.asFunction<
      int Function(ffi.Pointer<graal_isolate_t>,
          ffi.Pointer<ffi.Pointer<graal_isolatethread_t>>)>();

  ffi.Pointer<graal_isolatethread_t> graal_get_current_thread(
    ffi.Pointer<graal_isolate_t> isolate,
  ) {
    return _graal_get_current_thread(
      isolate,
    );
  }

  late final _graal_get_current_threadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<graal_isolatethread_t> Function(
              ffi.Pointer<graal_isolate_t>)>>('graal_get_current_thread');
  late final _graal_get_current_thread =
      _graal_get_current_threadPtr.asFunction<
          ffi.Pointer<graal_isolatethread_t> Function(
              ffi.Pointer<graal_isolate_t>)>();

  ffi.Pointer<graal_isolate_t> graal_get_isolate(
    ffi.Pointer<graal_isolatethread_t> thread,
  ) {
    return _graal_get_isolate(
      thread,
    );
  }

  late final _graal_get_isolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<graal_isolate_t> Function(
              ffi.Pointer<graal_isolatethread_t>)>>('graal_get_isolate');
  late final _graal_get_isolate = _graal_get_isolatePtr.asFunction<
      ffi.Pointer<graal_isolate_t> Function(
          ffi.Pointer<graal_isolatethread_t>)>();

  int graal_detach_thread(
    ffi.Pointer<graal_isolatethread_t> thread,
  ) {
    return _graal_detach_thread(
      thread,
    );
  }

  late final _graal_detach_threadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<graal_isolatethread_t>)>>('graal_detach_thread');
  late final _graal_detach_thread = _graal_detach_threadPtr
      .asFunction<int Function(ffi.Pointer<graal_isolatethread_t>)>();

  int graal_tear_down_isolate(
    ffi.Pointer<graal_isolatethread_t> isolateThread,
  ) {
    return _graal_tear_down_isolate(
      isolateThread,
    );
  }

  late final _graal_tear_down_isolatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<graal_isolatethread_t>)>>('graal_tear_down_isolate');
  late final _graal_tear_down_isolate = _graal_tear_down_isolatePtr
      .asFunction<int Function(ffi.Pointer<graal_isolatethread_t>)>();

  int graal_detach_all_threads_and_tear_down_isolate(
    ffi.Pointer<graal_isolatethread_t> isolateThread,
  ) {
    return _graal_detach_all_threads_and_tear_down_isolate(
      isolateThread,
    );
  }

  late final _graal_detach_all_threads_and_tear_down_isolatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<graal_isolatethread_t>)>>(
      'graal_detach_all_threads_and_tear_down_isolate');
  late final _graal_detach_all_threads_and_tear_down_isolate =
      _graal_detach_all_threads_and_tear_down_isolatePtr
          .asFunction<int Function(ffi.Pointer<graal_isolatethread_t>)>();

  int run_main(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _run_main(
      argc,
      argv,
    );
  }

  late final _run_mainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('run_main');
  late final _run_main = _run_mainPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> open_system_params(
    ffi.Pointer<graal_isolatethread_t> arg0,
  ) {
    return _open_system_params(
      arg0,
    );
  }

  late final _open_system_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>)>>('open_system_params');
  late final _open_system_params = _open_system_paramsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>)>();

  ffi.Pointer<ffi.Char> new_rulebook(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _new_rulebook(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _new_rulebookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('new_rulebook');
  late final _new_rulebook = _new_rulebookPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> extend_rulebook(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _extend_rulebook(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _extend_rulebookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('extend_rulebook');
  late final _extend_rulebook = _extend_rulebookPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> wallet_report(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _wallet_report(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wallet_reportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('wallet_report');
  late final _wallet_report = _wallet_reportPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> authentication_report(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _authentication_report(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _authentication_reportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('authentication_report');
  late final _authentication_report = _authentication_reportPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> spawn_network_map(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _spawn_network_map(
      arg0,
      arg1,
    );
  }

  late final _spawn_network_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>)>>('spawn_network_map');
  late final _spawn_network_map = _spawn_network_mapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> view_actor(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _view_actor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _view_actorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('view_actor');
  late final _view_actor = _view_actorPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> list_actors(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _list_actors(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _list_actorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('list_actors');
  late final _list_actors = _list_actorsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> list_rulebooks(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _list_rulebooks(
      arg0,
      arg1,
    );
  }

  late final _list_rulebooksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>)>>('list_rulebooks');
  late final _list_rulebooks = _list_rulebooksPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> proof_for_rulebook_sso(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _proof_for_rulebook_sso(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _proof_for_rulebook_ssoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('proof_for_rulebook_sso');
  late final _proof_for_rulebook_sso = _proof_for_rulebook_ssoPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> generate_delegation_request_for_third_party(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Char> arg5,
  ) {
    return _generate_delegation_request_for_third_party(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _generate_delegation_request_for_third_partyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<graal_isolatethread_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'generate_delegation_request_for_third_party');
  late final _generate_delegation_request_for_third_party =
      _generate_delegation_request_for_third_partyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fill_delegation_request(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _fill_delegation_request(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fill_delegation_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fill_delegation_request');
  late final _fill_delegation_request = _fill_delegation_requestPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> verify_delegation_request(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Char> arg5,
  ) {
    return _verify_delegation_request(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _verify_delegation_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('verify_delegation_request');
  late final _verify_delegation_request =
      _verify_delegation_requestPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> non_interactive_proof(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _non_interactive_proof(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _non_interactive_proofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('non_interactive_proof');
  late final _non_interactive_proof = _non_interactive_proofPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sftp_template(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sftp_template(
      arg0,
      arg1,
    );
  }

  late final _sftp_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>)>>('sftp_template');
  late final _sftp_template = _sftp_templatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sftp_add(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _sftp_add(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _sftp_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('sftp_add');
  late final _sftp_add = _sftp_addPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sftp_remove(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _sftp_remove(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _sftp_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('sftp_remove');
  late final _sftp_remove = _sftp_removePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> onboard_sybil_testnet(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _onboard_sybil_testnet(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _onboard_sybil_testnetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('onboard_sybil_testnet');
  late final _onboard_sybil_testnet = _onboard_sybil_testnetPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> onboard_rulebook(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _onboard_rulebook(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _onboard_rulebookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('onboard_rulebook');
  late final _onboard_rulebook = _onboard_rulebookPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> onboard_rulebook_advocate_uid(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _onboard_rulebook_advocate_uid(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _onboard_rulebook_advocate_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('onboard_rulebook_advocate_uid');
  late final _onboard_rulebook_advocate_uid =
      _onboard_rulebook_advocate_uidPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> authenticate(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _authenticate(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _authenticatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('authenticate');
  late final _authenticate = _authenticatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setup_wallet_path(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _setup_wallet_path(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setup_wallet_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('setup_wallet_path');
  late final _setup_wallet_path = _setup_wallet_pathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int delete_wallet(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _delete_wallet(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _delete_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('delete_wallet');
  late final _delete_wallet = _delete_walletPtr.asFunction<
      int Function(ffi.Pointer<graal_isolatethread_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> generate_reset_proof(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _generate_reset_proof(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _generate_reset_proofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('generate_reset_proof');
  late final _generate_reset_proof = _generate_reset_proofPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> sha_256_as_hex(
    ffi.Pointer<graal_isolatethread_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sha_256_as_hex(
      arg0,
      arg1,
    );
  }

  late final _sha_256_as_hexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<graal_isolatethread_t>,
              ffi.Pointer<ffi.Char>)>>('sha_256_as_hex');
  late final _sha_256_as_hex = _sha_256_as_hexPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<graal_isolatethread_t>, ffi.Pointer<ffi.Char>)>();

  int hello_exonym(
    ffi.Pointer<graal_isolatethread_t> arg0,
  ) {
    return _hello_exonym(
      arg0,
    );
  }

  late final _hello_exonymPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<graal_isolatethread_t>)>>('hello_exonym');
  late final _hello_exonym = _hello_exonymPtr
      .asFunction<int Function(ffi.Pointer<graal_isolatethread_t>)>();
}

class __graal_isolate_t extends ffi.Opaque {}

class __graal_isolatethread_t extends ffi.Opaque {}

class __graal_create_isolate_params_t extends ffi.Struct {
  @ffi.Int()
  external int version;

  @__graal_uword()
  external int reserved_address_space_size;

  external ffi.Pointer<ffi.Char> auxiliary_image_path;

  @__graal_uword()
  external int auxiliary_image_reserved_space_size;

  @ffi.Int()
  external int _reserved_1;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> _reserved_2;

  @ffi.Int()
  external int pkey;

  @ffi.Char()
  external int _reserved_3;

  @ffi.Char()
  external int _reserved_4;
}

typedef __graal_uword = ffi.UnsignedLong;
typedef graal_create_isolate_params_t = __graal_create_isolate_params_t;
typedef graal_isolate_t = __graal_isolate_t;
typedef graal_isolatethread_t = __graal_isolatethread_t;

const int __graal_create_isolate_params_version = 4;

const int NO_PROTECTION_DOMAIN = 0;

const int NEW_PROTECTION_DOMAIN = -1;

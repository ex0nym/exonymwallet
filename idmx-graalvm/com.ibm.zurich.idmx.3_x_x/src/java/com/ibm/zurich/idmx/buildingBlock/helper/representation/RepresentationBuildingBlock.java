//* Licensed Materials - Property of IBM                                     *
//* com.ibm.zurich.idmx.3_x_x                                                *
//* (C) Copyright IBM Corp. 2015. All Rights Reserved.                       *
//* US Government Users Restricted Rights - Use, duplication or              *
//* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.        *
//*                                                                          *
//* The contents of this file are subject to the terms of either the         *
//* International License Agreement for Identity Mixer Version 1.2 or the    *
//* Apache License Version 2.0.                                              *
//*                                                                          *
//* The license terms can be found in the file LICENSE.txt that is provided  *
//* together with this software.                                             *
//*/**/***********************************************************************
package com.ibm.zurich.idmx.buildingBlock.helper.representation;

import java.net.URI;
import java.util.List;
import java.util.logging.Logger;

import com.ibm.zurich.idmx.annotations.Nullable;
import com.ibm.zurich.idmx.buildingBlock.GeneralBuildingBlock;
import com.ibm.zurich.idmx.buildingBlock.factory.BuildingBlockFactory;
import com.ibm.zurich.idmx.buildingBlock.helper.BaseForRepresentation;
import com.ibm.zurich.idmx.exception.ConfigurationException;
import com.ibm.zurich.idmx.exception.ProofException;
import com.ibm.zurich.idmx.interfaces.device.ExternalSecretsManager;
import com.ibm.zurich.idmx.interfaces.util.BigIntFactory;
import com.ibm.zurich.idmx.interfaces.util.RandomGeneration;
import com.ibm.zurich.idmx.interfaces.util.group.Group;
import com.ibm.zurich.idmx.interfaces.util.group.GroupElement;
import com.ibm.zurich.idmx.interfaces.zkModule.ZkModuleProverCommitment;
import com.ibm.zurich.idmx.interfaces.zkModule.ZkModuleVerifier;

import eu.abc4trust.xml.SystemParameters;


public abstract class RepresentationBuildingBlock<G extends Group<G, GE, ?>, GE extends GroupElement<G, GE, ?>>
    extends GeneralBuildingBlock {
  protected final RandomGeneration randomGeneration;
  protected final ExternalSecretsManager esManager;
  protected final Logger logger;
  protected final BuildingBlockFactory bbFactory;
  protected final BigIntFactory bigIntFactory;


  public RepresentationBuildingBlock(final RandomGeneration rg, final BuildingBlockFactory bbFactory,
                                     final ExternalSecretsManager esManager, final Logger logger, final BigIntFactory bigIntFactory) {
    this.randomGeneration = rg;
    this.esManager = esManager;
    this.logger = logger;
    this.bbFactory = bbFactory;
    this.bigIntFactory = bigIntFactory;
  }

  public abstract ZkModuleProverCommitment<GE> getZkModuleProver(final SystemParameters systemParameters,
    final String identifierOfModule, final @Nullable URI identifierOfCredentialForSecret,
      final List<BaseForRepresentation> bases, final G group, final @Nullable GE commitment,
      final @Nullable URI deviceUid, final String username, final @Nullable URI scope) throws ConfigurationException;

  /**
   * This method creates a new ZkModuleVerifier object that will know how to verify a proof of
   * knowledge of the representation generated by getZkModuleProver.
   */
  public abstract ZkModuleVerifier getZkModuleVerifier(final SystemParameters systemParameters,
                                                       final String identifierOfModule, final List<BaseForRepresentation> bases,
      final @Nullable GE commitment, final @Nullable String commitmentAsDValue,
      final @Nullable G group) throws ProofException;
}

//* Licensed Materials - Property of IBM                                     *
//* com.ibm.zurich.idmx.3_x_x                                                *
//* (C) Copyright IBM Corp. 2015. All Rights Reserved.                       *
//* US Government Users Restricted Rights - Use, duplication or              *
//* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.        *
//*                                                                          *
//* The contents of this file are subject to the terms of either the         *
//* International License Agreement for Identity Mixer Version 1.2 or the    *
//* Apache License Version 2.0.                                              *
//*                                                                          *
//* The license terms can be found in the file LICENSE.txt that is provided  *
//* together with this software.                                             *
//*/**/***********************************************************************
package com.ibm.zurich.idmx.abc4trust;

import java.net.URI;
import java.util.Collections;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import com.ibm.zurich.idmix.abc4trust.XmlUtils;
import com.ibm.zurich.idmx.jaxb.JaxbHelperClass;
import com.ibm.zurich.idmx.tests.TestUtils;
import com.ibm.zurich.idmx.tests.setup.TestSystemParameters;

import eu.abc4trust.xml.ObjectFactory;
import eu.abc4trust.xml.PresentationToken;
import eu.abc4trust.xml.PresentationTokenDescription;
import eu.abc4trust.xml.VerifierParameters;

public class SplitPresentationPatrasTest {

  private PatrasHelper helper;

  @Before
  public void setUp() throws Exception {
    helper = new PatrasHelper();
    helper.setupPresentation(true, true);
    helper.loadDefaultResources();
  }

  @Test
  public void testLoginWithPseudonymProver() throws Exception {
    PresentationToken pt =
        TestUtils.getResource("patras/presentation/presentationTokenPatrasUniversityLogin.xml",
            PresentationToken.class, this, true);
    PresentationTokenDescription ptd = pt.getPresentationTokenDescription();

    List<URI> creds = Collections.emptyList();

    PresentationToken actualPt = helper.runPresentationProtocolProver(ptd, creds);
    String pt_xml = JaxbHelperClass.serialize(new ObjectFactory().createPresentationToken(actualPt));
    TestUtils.saveToFile(pt_xml, TestSystemParameters.BASE_LOCATION.resolve("tokens/patrasUniversityLogin.xml")
      .toString());
    String vp_xml = JaxbHelperClass.serialize(new ObjectFactory().createVerifierParameters(helper.verifierParameters));
    TestUtils.saveToFile(vp_xml, TestSystemParameters.BASE_LOCATION.resolve("verifierParameters/patrasVP.xml")
      .toString());
  }
  
  /*
   * If this test fails, you might need to copy the files patrasUniversityLogin.xml and patrasVP.xml
   * generated by the previous test to the patras/presentation/split resource folder.
   */
  @Test
  public void testLoginWithPseudonymVerifier() throws Exception {
    PresentationToken pt =
        TestUtils.getResource("patras/presentation/split/patrasUniversityLogin.xml",
            PresentationToken.class, this, true);
    XmlUtils.fixNestedContent(pt.getCryptoEvidence());
    helper.verifierParameters =
        TestUtils.getResource("patras/presentation/split/patrasVP.xml",
          VerifierParameters.class, this, true);
    XmlUtils.fixNestedContent(helper.verifierParameters.getCryptoParams());
    System.out.println(JaxbHelperClass.serialize(new ObjectFactory().createVerifierParameters(helper.verifierParameters)));
    helper.runPresentationProtocolVerifier(pt); 
  }
}
